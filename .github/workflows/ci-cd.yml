name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm run test --workspace=apps/${{ matrix.workspace }}

    - name: Run linting
      run: npm run lint --workspace=apps/${{ matrix.workspace }}

    - name: Build application
      run: npm run build --workspace=apps/${{ matrix.workspace }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.workspace }}-build
        path: apps/${{ matrix.workspace }}/dist

  # Infrastructure Tests
  infrastructure-tests:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build infrastructure
      run: npm run build --workspace=infra

    - name: CDK Diff
      run: |
        cd infra
        npm run diff
      continue-on-error: true

  # Deploy Backend (on main branch only)
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [test-and-build, infrastructure-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: apps/backend/dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy backend infrastructure
      run: |
        cd infra
        npm run deploy:backend

    - name: Get API Gateway URL
      id: get-api-url
      run: |
        cd infra
        API_URL=$(npx cdk deploy --outputs-file cdk-outputs.json --require-approval never 2>/dev/null | grep -o 'https://[^"]*\.execute-api\.us-east-1\.amazonaws\.com' | head -1)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Test deployed API
      run: |
        API_URL=${{ steps.get-api-url.outputs.api_url }}
        if [ -n "$API_URL" ]; then
          curl -f "$API_URL/health" || exit 1
        fi

  # Deploy Frontend (on main branch only)
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test-and-build, infrastructure-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: apps/frontend/dist

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy frontend infrastructure
      run: |
        cd infra
        npm run deploy:frontend

  # Integration Tests (after deployment)
  integration-tests:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get deployment URLs
      id: get-urls
      run: |
        cd infra
        API_URL=$(npx cdk deploy --outputs-file cdk-outputs.json --require-approval never 2>/dev/null | grep -o 'https://[^"]*\.execute-api\.us-east-1\.amazonaws\.com' | head -1)
        FRONTEND_URL=$(npx cdk deploy --outputs-file cdk-outputs.json --require-approval never 2>/dev/null | grep -o 'https://[^"]*\.cloudfront\.net' | head -1)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT

    - name: Run integration tests
      run: |
        API_URL=${{ steps.get-urls.outputs.api_url }}
        FRONTEND_URL=${{ steps.get-urls.outputs.frontend_url }}
        
        # Test API endpoints
        if [ -n "$API_URL" ]; then
          echo "Testing API at: $API_URL"
          curl -f "$API_URL/health" || exit 1
          curl -f "$API_URL/api/tasks" || exit 1
        fi
        
        # Test frontend (basic connectivity)
        if [ -n "$FRONTEND_URL" ]; then
          echo "Testing frontend at: $FRONTEND_URL"
          curl -f "$FRONTEND_URL" || exit 1
        fi

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get API URL
      id: get-api-url
      run: |
        cd infra
        API_URL=$(npx cdk deploy --outputs-file cdk-outputs.json --require-approval never 2>/dev/null | grep -o 'https://[^"]*\.execute-api\.us-east-1\.amazonaws\.com' | head -1)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT

    - name: Run performance tests
      run: |
        API_URL=${{ steps.get-api-url.outputs.api_url }}
        if [ -n "$API_URL" ]; then
          echo "Running performance tests against: $API_URL"
          
          # Test response time
          start_time=$(date +%s%N)
          curl -s "$API_URL/health" > /dev/null
          end_time=$(date +%s%N)
          response_time=$(( (end_time - start_time) / 1000000 ))
          
          echo "Response time: ${response_time}ms"
          
          # Fail if response time is too high
          if [ $response_time -gt 5000 ]; then
            echo "Response time too high: ${response_time}ms"
            exit 1
          fi
        fi

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run SAST scan
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Notify on completion
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, integration-tests, performance-tests, security-scan]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-backend.result }}" == "success" ] && [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Application deployed to AWS"
          echo "üîó Check the deployment outputs for URLs"
        else
          echo "‚ùå Deployment failed!"
          echo "üîç Check the logs for details"
          exit 1
        fi 